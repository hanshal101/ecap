name: Run ROC Sensor in GitHub Actions

on:
  workflow_dispatch:

jobs:
  run-roc:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare config file
        run: |
          mkdir -p ./roc-config ./roc-output
          cat <<'EOF' > ./roc-config/pattern.yaml
          patterns:
            - id: "api_key"
              regex: "(?i)api[_-]?key\\s*[:=]\\s*[A-Za-z0-9\\-_]{16,}"
            - id: "authorization_bearer"
              regex: "Bearer\\s+[A-Za-z0-9\\-._~+/]+=*"
            - id: "email"
              regex: "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
          EOF
          ls -l ./roc-config/

      - name: Run eCapture binary
        run: |
          echo "Starting eCapture in background..."
          chmod +x ./ecapture
          sudo ./ecapture tls -m pcapng -i eth0 -w /tmp/roc-output --rotation-interval 1m "(tcp port 80 or tcp port 443)" > ecapture.log 2>&1 &
          echo "Waiting 10 seconds before generating traffic..."
          sleep 10

      - name: Simulate curl traffic
        run: |
          echo "Generating curl traffic..."
          curl -s https://example.com > /dev/null || true
          curl -s -X POST https://httpbin.org/post -d '{"roc":"test"}' \
            -H "Content-Type: application/json" > /dev/null || true

      - name: Print eCapture logs
        run: |
          echo "Sleeping for 10 seconds to allow capture to process..."
          sleep 10
          echo "Printing eCapture logs..."
          cat ecapture.log || true
          echo "Listing output directory..."
          ls -l /tmp/roc-output || true

      - name: Cleanup
        if: always()
        run: |
          pkill -f ecapture || true
          rm -rf /tmp/roc-output ./roc-config ecapture.log
