name: Run eCapture in Privileged Docker (GitHub Actions)

on:
  workflow_dispatch:

jobs:
  run-ecapture:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare pattern config
        run: |
          mkdir -p ./roc-config ./roc-output
          cat <<'EOF' > ./roc-config/pattern.yaml
          patterns:
            - id: "api_key"
              regex: "(?i)api[_-]?key\\s*[:=]\\s*[A-Za-z0-9\\-_]{16,}"
            - id: "authorization_bearer"
              regex: "Bearer\\s+[A-Za-z0-9\\-._~+/]+=*"
            - id: "email"
              regex: "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
          EOF
          ls -l ./roc-config/

      - name: Create Dockerfile for eCapture
        run: |
          cat <<'EOF' > Dockerfile
          FROM ubuntu:24.04

          RUN apt-get update && \
              apt-get install -y iproute2 tcpdump ca-certificates && \
              mkdir -p /tmp/roc-output

          COPY ecapture /usr/local/bin/ecapture
          WORKDIR /workspace

          ENTRYPOINT ["/usr/local/bin/ecapture"]
          EOF
          echo "Dockerfile created:"
          cat Dockerfile

      - name: Build privileged container for eCapture
        run: |
          echo "Building eCapture Docker image..."
          chmod +x ./ecapture
          docker build -t ecapture-test .

      - name: Run eCapture in privileged container
        run: |
          echo "Starting eCapture container..."
          docker run -d --name ecapture-test \
            --privileged \
            --pid=host \
            --network=host \
            -v /proc:/proc \
            -v /sys:/sys \
            -v ${{ github.workspace }}/roc-output:/tmp/roc-output \
            -v ${{ github.workspace }}/roc-config:/roc-config:ro \
            ecapture-test \
            tls -m pcapng -i eth0 -w /tmp/roc-output --rotation-interval 1m "(tcp port 80 or tcp port 443)"
          echo "Waiting 10 seconds for eCapture to initialize..."
          sleep 10

      - name: Simulate curl traffic
        run: |
          echo "Generating curl traffic..."
          curl -s https://example.com > /dev/null || true
          curl -s -X POST https://httpbin.org/post -d '{"roc":"test"}' \
            -H "Content-Type: application/json" > /dev/null || true

      - name: Print eCapture logs
        run: |
          echo "Sleeping 10 seconds before fetching logs..."
          sleep 10
          echo "Fetching eCapture container logs..."
          docker logs ecapture-test || true
          echo "Listing output directory..."
          ls -l ${{ github.workspace }}/roc-output || true

      - name: Upload captured files (for inspection)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ecapture-output
          path: ${{ github.workspace }}/roc-output

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          docker rm -f ecapture-test || true
          rm -rf ./roc-config ./roc-output Dockerfile
